name: build and test
on:
  push:
    tags:
      - v*

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [1.13.2]
    steps:
      - name: go
        uses: actions/setup-go@v1
        with:
          go-version: ${{matrix.go}}

      - name: checkout
        uses: actions/checkout@v1
        with: { fetch-depth: 1 }

      - name: deps
        run: go mod download
        env: { GOPROXY: 'https://proxy.golang.org' }

      - name: test
        run: go test ./...

  build:
    name: build
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [1.13.2]
    steps:
      - name: go
        uses: actions/setup-go@v1
        with:
          go-version: ${{matrix.go}}

      - name: checkout
        uses: actions/checkout@v1
        with: { fetch-depth: 1 }

      - name: deps
        run: go mod download
        env: { GOPROXY: 'https://proxy.golang.org' }

      - name: tag parsing
        id: tag_parse
        # Nasty bash script to set metadata for 
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      - name: build-linux
        run: go build -o bpass -trimpath -ldflags '-X main.version=${{ steps.tag_parse.outputs.tag }}'
        env:
          GOOS: linux
          GOARCH: amd64

      - name: package-linux
        run: tar czf bpass-${{ gsteps.tag_parse.outputs.tag }}-linux-x86_64.tar.gz bpass && rm bpass

      - name: build-darwin
        run: go build -o bpass -trimpath -ldflags '-X main.version=${{ steps.tag_parse.outputs.tag }}'
        env:
          GOOS: darwin
          GOARCH: amd64

      - name: package-darwin
        run: tar czf bpass-${{ gsteps.tag_parse.outputs.tag }}-darwin-x86_64.tar.gz bpass && rm bpass

      - name: build-windows
        run: go build -o bpass.exe -trimpath -ldflags '-X main.version=${{ gsteps.tag_parse.outputs.tag }}'
        env:
          GOOS: windows
          GOARCH: amd64

      - name: package-windows
        run: zip bpass-${{ gsteps.tag_parse.outputs.tag }}-windows-x86_64.zip bpass.exe && rm bpass.exe

      - name: create gh release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false
      
      - name: upload linux artifact
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bpass-${{ gsteps.tag_parse.outputs.tag }}-linux-x86_64.tar.gz
          asset_name: bpass-${{ gsteps.tag_parse.outputs.tag }}-linux-x86_64.tar.gz 
          asset_content_type: application/gzip

      - name: upload darwin artifact
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bpass-${{ gsteps.tag_parse.outputs.tag }}-darwin-x86_64.tar.gz
          asset_name: bpass-${{ gsteps.tag_parse.outputs.tag }}-darwin-x86_64.tar.gz 
          asset_content_type: application/gzip

      - name: upload windows artifact
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bpass-${{ gsteps.tag_parse.outputs.tag }}-windows-x86_64.zip
          asset_name: bpass-${{ gsteps.tag_parse.outputs.tag }}-windows-x86_64.zip
          asset_content_type: application/zip
