package crypt

import (
	"bytes"
	"testing"
)

func TestEncryption(t *testing.T) {
	t.Parallel()

	password := []byte("hunter42")
	plaintext := []byte("plaintext goes here")

	ciphertext, err := Encrypt(1, password, plaintext)
	if err != nil {
		t.Fatal(err)
	}

	gotPlaintext, err := Decrypt(password, ciphertext)
	if err != nil {
		t.Error(err)
	}

	if !bytes.Equal(plaintext, gotPlaintext) {
		t.Errorf("want: %s, got: %s", plaintext, gotPlaintext)
	}
}

func TestKeyDerivation(t *testing.T) {
	t.Parallel()

	testPass := []byte("hunter42")
	testSalt := []byte("abcdefgh12345678")

	// 32+32+16+16 is the combined key size of the version 1 algorithms
	keysize := 32+32+16+16
	key, err := deriveKey(1, testPass, testSalt, keysize)
	if err != nil {
		t.Error(err)
	}

	if len(key) != keysize {
		t.Error("keysize was wrong:", len(key))
	}

	want := []byte{
		0xD4,0x3B,0x74,0x9F,0x72,0x65,0xAC,0x1A,0xE8,0x7B,0xFD,0xF6,0xE4,0xA7,0x14,0x92,0x78,0xA9,0x07,0x3F,0xDE,0x36,
		0xA1,0x26,0xBF,0x6C,0xCD,0x51,0x93,0x47,0xCA,0xAF,0xE4,0x71,0x77,0xFD,0xF0,0xA3,0x8E,0xAB,0x3F,0x9A,0x98,0x8F,
		0x51,0xF0,0xCC,0x92,0x69,0xDC,0x16,0x8A,0xEB,0x0A,0x45,0x1B,0xEB,0x4B,0x58,0xAF,0x66,0x82,0xB7,0x6C,0x48,0x42,
		0xEB,0x83,0x0B,0xD7,0x1A,0x08,0x12,0x63,0x3D,0x2B,0x1E,0xE8,0x28,0x5A,0xC2,0x36,0xD0,0xE0,0xB3,0xB2,0x4A,0xE0,
		0xE6,0xAF,0x08,0x8F,0x1B,0x17,0x96,0xFA,
	}

	if !bytes.Equal(want, key) {
		t.Errorf("key was not equal: %#v", key)
	}
}